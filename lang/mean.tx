/*
  This is a textX specification of MEAN.TX DSL for generating MEAN.IO stack applications.
  Authors: Nemanja Ristić <twcbason AT hotmail DOT com>
           Daniel Kupčo <kupcodanex AT outlook DOT com>
           Novak Boškov <gnovak DOT boskov AT gmail DOT com>
*/

MeanModel:
  "app" name=STRING
  (description=STRING)?
  blocks+=BlockType
;

BlockType:
   PartType | ActionType | ActorType | ActorGroupType
;

PartType:
  'part' '{'
    // TODO: Every piece must be mentioned once but order doesn't matter
    namePiece=PartNamePiece
    multiPiece=PartMultiPiece
    propertiesPiece=PartPropertiesPiece
    actionPiece=PartActionPiece
    ownerPart=PartOwnerPiece
  '}'
;

PartNamePiece:
  'name:' partname=STRING
;

PartMultiPiece:
  'multi:' multi=YesNo
;

YesNo:
  'yes' | 'no'
;

PartPropertiesPiece:
  'properties:' '{'
     properties*=Property[',']
   '}'
;

Property:
  '[' name=STRING ',' type=Type (',' visibility=Visible)?']'
;

Visible:
  'visible'
;

Type:
  'String' | 'Text' | 'Number' | 'Boolean' | ref=Reference
;

Reference:
  '~' name=STRING
;
  
PartActionPiece:
  'actions:' '{'
    actions*=Reference[',']
  '}'
;

PartOwnerPiece:
  'owner:' '{'
    owners*=Reference[',']
  '}'
;

ActionType:
  '->action' '{'
    actionNamePiece=ActionNamePiece
    actionDoPiece=ActionDoPiece
    actionOnPiece=ActionOnPiece
    actionWhoPiece=ActionWhoPiece
  '}'
;

ActionNamePiece:
  'name:' name=STRING
;

ActionDoPiece:
  'do:' actionCRUD=CRUDOperation prompt=ActionDoPiecePrompt?
;

CRUDOperation:
  'create' | 'read' | 'update' | 'delete'
;

ActionDoPiecePrompt:
  '[' 'prompt:' prompt=YesNo ']'
;

ActionOnPiece:
  'on:' actionOnPiecePart=ActionOnPiecePart | actionOnPieceParts=ActionOnPieceParts
;

ActionOnPiecePart:
  part=Reference
;

ActionOnPieceParts:
  '['
    parts+=ActionOnPiecePart[',']
  ']'
;

ActionWhoPiece:
  'who:' actionWhoPieceOwner=ActionWhoPieceOwner | whoItems=WhoItems | anyone=Anyone
;

Anyone:
  '*'
;

ActionWhoPieceOwner:
  // TODO: 'owner' is owner of referenced part owner if exists
  // whoItems explain which actor or which actors have permission to do the action
  'owner' whoItems=WhoItems?
;

WhoItems:
  '['
    whoItems*=WhoItem[',']
  ']'
;

WhoItem:
  who=Reference
;

ActorType:
  'actor' '{'
    name=ActorNamePiece
    group=ActorGroupPiece
  '}'
;

ActorNamePiece:
  'name:' name=STRING
;

ActorGroupPiece:
  'group:' actorGroupPieceGroup=ActorGroupPieceGroup | actorGroupPieceGroups=ActorGroupPieceGroups
;

ActorGroupPieceGroups:
  '['
    groups+=ActorGroupPieceGroup[',']
  ']'
;

ActorGroupPieceGroup:
  actor_group=Reference
;

ActorGroupType:
  'actor-group' '{'
    name=ActorGroupNamePiece
    actions=ActorGroupActionsPiece
  '}'
;

ActorGroupNamePiece:
  'name:' name=STRING
;

ActorGroupActionsPiece:
  'actions:' actorGroupActionsPieceAction=ActorGroupActionsPieceAction | actorGroupActionsPieceActions=ActorGroupActionsPieceActions
;

ActorGroupActionsPieceActions:
  '['
    actions+=ActorGroupActionsPieceAction[',']
  ']'
;

ActorGroupActionsPieceAction:
  action=Reference
;

Comment:
  /#.*$/
;